/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import Codigo.ListaCalendario;
import Codigo.ListaEquipos;
import Codigo.ListaEstadios;
import Codigo.ListaGrupos;
import Codigo.ListaJugadores;
import Codigo.NodoEncuentro;
import Codigo.NodoEquipo;
import Codigo.NodoJugador;
import Codigo.XMLReader;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario A
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    // Lector de la informaci칩n almacenada en los Archivos XML
    XMLReader lector = new XMLReader();
    // Listas de Estadios, Equipos Y Grupos del Mundial
    ListaEstadios estadiosMundial;
    ListaEquipos listaEquiposMundial;
    ListaGrupos listaDeGrupos;
    // Formato que se va a establecer en la creacion de cada fecha
    SimpleDateFormat formatoFecha = new SimpleDateFormat("EEEE dd 'de' MMMM 'de' yyyy,   h:mm a");

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        setLocationRelativeTo(null);

        // Se carga la informacion Estadios, Equipos Y Grupos, del XML, y se 
        // almacena en una Lista Simple Enlazada cada uno
        estadiosMundial = lector.cargarListaDeEstadios();
        listaEquiposMundial = lector.cargarListaEquipos();
        listaDeGrupos = lector.cargarCalendarioYGrupos(listaEquiposMundial, estadiosMundial);
        cargarEquiposEnDropDownList();
        cargarEstadiosEnDropDownList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        Btn_Estadios = new javax.swing.JButton();
        Btn_Selecciones = new javax.swing.JButton();
        Btn_Goleadores = new javax.swing.JButton();
        Btn_TablaPosiciones = new javax.swing.JButton();
        Btn_Calendario = new javax.swing.JButton();
        Btn_Calendario1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        Cmb_EquiposJugadorMasJoven = new javax.swing.JComboBox();
        Rbnt_MasJoven = new javax.swing.JRadioButton();
        Rbtn_MasViejo = new javax.swing.JRadioButton();
        Btn_VerMasJoven = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Cmb_Estadios = new javax.swing.JComboBox();
        Cmb_VarEstadios = new javax.swing.JComboBox();
        Txt_VarEstadio = new javax.swing.JTextField();
        Btn_ModificarEstadio = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        Btn_ModificarJugador = new javax.swing.JButton();
        Txt_DatoModJugador = new javax.swing.JTextField();
        Cmb_VarJugador = new javax.swing.JComboBox();
        Cmb_Jugadores = new javax.swing.JComboBox();
        Cmb_ModSelecciones = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FIFA World Cup Brazil 2014");
        setResizable(false);

        jTabbedPane1.setFocusable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Btn_Estadios.setText("Estadios");
        Btn_Estadios.setFocusable(false);
        Btn_Estadios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EstadiosActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Estadios, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 150, 30));

        Btn_Selecciones.setText("Selecciones");
        Btn_Selecciones.setFocusable(false);
        Btn_Selecciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SeleccionesActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Selecciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 150, 30));

        Btn_Goleadores.setText("Goleadores");
        Btn_Goleadores.setFocusable(false);
        Btn_Goleadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_GoleadoresActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Goleadores, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 150, 30));

        Btn_TablaPosiciones.setText("Tabla de Posiciones");
        Btn_TablaPosiciones.setFocusable(false);
        Btn_TablaPosiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_TablaPosicionesActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_TablaPosiciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 150, 30));

        Btn_Calendario.setText("Calendario");
        Btn_Calendario.setFocusable(false);
        Btn_Calendario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CalendarioActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Calendario, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 150, 30));

        Btn_Calendario1.setText("Grupos");
        Btn_Calendario1.setFocusable(false);
        Btn_Calendario1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Calendario1ActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Calendario1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 150, 30));

        jPanel3.setOpaque(false);

        jLabel7.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Selecci칩n");

        Cmb_EquiposJugadorMasJoven.setFocusable(false);

        buttonGroup1.add(Rbnt_MasJoven);
        Rbnt_MasJoven.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        Rbnt_MasJoven.setForeground(new java.awt.Color(255, 255, 255));
        Rbnt_MasJoven.setSelected(true);
        Rbnt_MasJoven.setText("Jugador m치s joven");
        Rbnt_MasJoven.setFocusable(false);
        Rbnt_MasJoven.setOpaque(false);

        buttonGroup1.add(Rbtn_MasViejo);
        Rbtn_MasViejo.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        Rbtn_MasViejo.setForeground(new java.awt.Color(255, 255, 255));
        Rbtn_MasViejo.setText("Jugador m치s viejo");
        Rbtn_MasViejo.setFocusable(false);
        Rbtn_MasViejo.setOpaque(false);

        Btn_VerMasJoven.setText("Visualizar");
        Btn_VerMasJoven.setFocusable(false);
        Btn_VerMasJoven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_VerMasJovenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Btn_VerMasJoven, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Rbtn_MasViejo)
                        .addComponent(Rbnt_MasJoven)
                        .addComponent(Cmb_EquiposJugadorMasJoven, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Cmb_EquiposJugadorMasJoven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Rbnt_MasJoven)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Rbtn_MasViejo)
                .addGap(21, 21, 21)
                .addComponent(Btn_VerMasJoven))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, 190, 160));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Mascota.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 330, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Barra Inferior.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 357, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FIFA World Cup Fondo.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTabbedPane1.addTab("Principal", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setOpaque(false);

        jLabel8.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Modificar Contenido de Estadio");

        Cmb_Estadios.setFocusable(false);

        Cmb_VarEstadios.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Modificar nombre", "Modificar ciudad", "Modificar capacidad" }));
        Cmb_VarEstadios.setFocusable(false);
        Cmb_VarEstadios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cmb_VarEstadiosActionPerformed(evt);
            }
        });

        Txt_VarEstadio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_VarEstadioKeyTyped(evt);
            }
        });

        Btn_ModificarEstadio.setText("Modificar");
        Btn_ModificarEstadio.setFocusable(false);
        Btn_ModificarEstadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ModificarEstadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Btn_ModificarEstadio)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Txt_VarEstadio, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Cmb_VarEstadios, javax.swing.GroupLayout.Alignment.LEADING, 0, 147, Short.MAX_VALUE)
                        .addComponent(Cmb_Estadios, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(33, 33, 33))
            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(Cmb_Estadios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(Cmb_VarEstadios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(Txt_VarEstadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(Btn_ModificarEstadio)
                .addContainerGap())
        );

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 180, 180));

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Btn_ModificarJugador.setText("Modificar");
        Btn_ModificarJugador.setFocusable(false);
        Btn_ModificarJugador.setNextFocusableComponent(Cmb_ModSelecciones);
        Btn_ModificarJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ModificarJugadorActionPerformed(evt);
            }
        });
        jPanel4.add(Btn_ModificarJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 180, -1, -1));

        Txt_DatoModJugador.setNextFocusableComponent(Btn_ModificarJugador);
        Txt_DatoModJugador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_DatoModJugadorKeyTyped(evt);
            }
        });
        jPanel4.add(Txt_DatoModJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 167, -1));

        Cmb_VarJugador.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Modificar nombre", "Modificar edad", "Modificar estatura (cm)", "Modificar goles anotados", "Modificar n칰mero de camiseta", "Modificar posici칩n", "Eliminar jugador" }));
        Cmb_VarJugador.setFocusable(false);
        Cmb_VarJugador.setNextFocusableComponent(Txt_DatoModJugador);
        Cmb_VarJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cmb_VarJugadorActionPerformed(evt);
            }
        });
        jPanel4.add(Cmb_VarJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        Cmb_Jugadores.setFocusable(false);
        Cmb_Jugadores.setNextFocusableComponent(Cmb_VarJugador);
        jPanel4.add(Cmb_Jugadores, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 167, -1));

        Cmb_ModSelecciones.setFocusable(false);
        Cmb_ModSelecciones.setNextFocusableComponent(Cmb_Jugadores);
        Cmb_ModSelecciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cmb_ModSeleccionesActionPerformed(evt);
            }
        });
        jPanel4.add(Cmb_ModSelecciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 167, -1));

        jLabel9.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Modificar Contenido de Jugador");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, 30));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 200, 210));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Mascota.png"))); // NOI18N
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 330, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Barra Inferior.png"))); // NOI18N
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 357, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FIFA World Cup Fondo.jpg"))); // NOI18N
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTabbedPane1.addTab("Modificar Contenido", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para cargar la lista de estadios en el ComboBox para modificar
     * estadio
     */
    public void cargarEstadiosEnDropDownList() {
        Cmb_Estadios.removeAllItems();
        estadiosMundial.inicializarNodoActal();
        while (estadiosMundial.getNodoActual() != null) {
            Cmb_Estadios.addItem(estadiosMundial.getNodoActual().getNombreEstadio());
            estadiosMundial.moverNodoActual();
        }
    }

    /**
     * Metodo utilizado para cargar la lista de los paises en el ComboBox de
     * editar y el de mostrar el jugador mas joven/viejo
     */
    public void cargarEquiposEnDropDownList() {

        listaEquiposMundial.inicializarNodoActual();
        while (listaEquiposMundial.getNodoActual() != null) {

            String nombreEquipo = listaEquiposMundial.getNodoActual().getNombreEquipo();
            Cmb_ModSelecciones.addItem(nombreEquipo);
            Cmb_EquiposJugadorMasJoven.addItem(nombreEquipo);

            listaEquiposMundial.moverNodoActual();
        }
        cargarJugadoresEnDropDownList();
    }

    /**
     * Metodo Utilizado para cargar los jugadores en el ComboBox de editar
     */
    private void cargarJugadoresEnDropDownList() {

        Cmb_Jugadores.removeAllItems();

        NodoEquipo equipoSeleccionado = listaEquiposMundial.getNodoEquipo(Cmb_ModSelecciones.getSelectedItem().toString());
        ListaJugadores jugadoresSeleccion = equipoSeleccionado.getJugadores();

        jugadoresSeleccion.inicializarNodoActual();
        while (jugadoresSeleccion.getNodoActual() != null) {
            Cmb_Jugadores.addItem(jugadoresSeleccion.getNodoActual().getNombre());
            jugadoresSeleccion.moverNodoActual();
        }
    }

    /**
     * Metodo utilizado para cargar la lista de goleadores y mostrar la ventana
     * al presionar el boton
     *
     * @param evt
     */
    private void Btn_GoleadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_GoleadoresActionPerformed

        // Se crea la ventana que contiene los Goleadores del torneo
        VentanaGoleadores ventana = new VentanaGoleadores();
        // Se crean dos arreglos y se inicializan vacios. Estos arreglos son los
        // que contienen a los goleadores y a la seleccion que pertenece 칠l.
        NodoJugador[] goleadores = {null, null, null, null, null};
        String[] equipos = {"", "", "", "", ""};

        // Se mueve el nodo recorredor de la lista de equipos, a la raiz de esta.
        listaEquiposMundial.inicializarNodoActual();
        // Se recorre toda la lista de equipos
        while (listaEquiposMundial.getNodoActual() != null) {
            // Se obtiene el nombre de la seleccion actual
            String seleccionActual = listaEquiposMundial.getNodoActual().getNombreEquipo();
            // Se obtiene la lista de jugadores de el equipo actual
            ListaJugadores jugadores = listaEquiposMundial.getNodoActual().getJugadores();
            // Se mueve a la raiz, el nodo que recorrera la lista de jugadores
            jugadores.inicializarNodoActual();
            // Se recorre la lista de jugadores de la seleccion analizada actualmente
            while (jugadores.getNodoActual() != null) {
                // Se obtiene el jugador analizado en la iteracion
                NodoJugador jugadorAnalizado = jugadores.getNodoActual();
                // Se le asigna al jugador actual, la seleccion a la que pertenece
                String seleccionDelJugador = seleccionActual;
                // Se comparan los goles del jugador con los goleadores de la lista
                for (int i = 0; i < goleadores.length; i++) {
                    // Se inserta el jugador en la posicion i, si no hay jugador
                    if (goleadores[i] == null) {
                        goleadores[i] = jugadorAnalizado;
                        equipos[i] = seleccionDelJugador;
                        break;
                    } // Si el jugador analizado, tiene mas goles que uno ubicado en el
                    // arreglo, se inserta este en el arreglo y el que estaba ahora va
                    // a buscar la posicion que le corresponde del arreglo
                    else if (goleadores[i].getCantidadGolesAnotados() < jugadorAnalizado.getCantidadGolesAnotados()) {
                        // Realiza el intercambio de jugadores en el arreglo
                        NodoJugador jugadorAux = goleadores[i];
                        goleadores[i] = jugadorAnalizado;
                        jugadorAnalizado = jugadorAux;
                        // Realiza el intercambio de equipo al que pertenece el jugador
                        String seleccionAux = equipos[i];
                        equipos[i] = seleccionDelJugador;
                        seleccionDelJugador = seleccionAux;
                    }
                }
                // Mueve el nodo recorredor de la lista de jugadores
                jugadores.moverNodoActual();
            }
            // Mueve el nodo recorredor de la lista de equipos participantes
            listaEquiposMundial.moverNodoActual();
        }

        // Se recorre la lista final de goleadores para agregarlos a la ventana
        for (int i = 0; i < goleadores.length; i++) {
            // Se obtienen el nombre del goleador, la seleccion y los goles anotados
            String seleccionDelGoleador = equipos[i];
            String nombreGoleador = goleadores[i].getNombre();
            int cantidadGoles = goleadores[i].getCantidadGolesAnotados();

            // Se crea un Panel que contentiene al goleador
            PanelGoleador goleadoresTorneo = new PanelGoleador();
            // Establece los datos de goleo del jugador, al Panel
            goleadoresTorneo.setGoleadores(seleccionDelGoleador, nombreGoleador, cantidadGoles);
            // Se agrega el panel a la Ventana
            ventana.agregarGoleador(goleadoresTorneo);
        }
        // Se muestra la ventana con los goleadores del torneo
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_GoleadoresActionPerformed

    /**
     * Metodo utilizado para cargar la lista de estadios y mostrar la ventana al
     * presionar el boton
     *
     * @param evt
     */
    private void Btn_EstadiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EstadiosActionPerformed

        // Se crea una VentanaEstadios, donde se mostraran todos los estadios del mundial
        VentanaEstadios ventana = new VentanaEstadios();
        // Se inicializa el NodoEstadio que va a recorrer toda la lista
        estadiosMundial.inicializarNodoActal();
        // Se recorre toda la lista de estadios para agregar cada uno a la ventana
        while (estadiosMundial.getNodoActual() != null) {
            // Se crea un nuevo Panel donde se almacena la info del estadio actual
            PanelEstadio estadio = new PanelEstadio();
            // Se establecen los datos(Nombre, Ciudad, Capacidad) del estadio al Panel.
            estadio.setDatos(estadiosMundial.getNodoActual().getNombreEstadio(),
                    estadiosMundial.getNodoActual().getCiudad(), estadiosMundial.getNodoActual().getCapacidad());
            // Se agrega el Estadio a la ventana
            ventana.agregarEstadio(estadio);
            // Se mueve al estadio siguiente de la lista, el Nodo recorredor
            estadiosMundial.moverNodoActual();
        }
        // Se muestra la ventana con todos los estadios del mundial
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_EstadiosActionPerformed

    /**
     * Metodo utilizado para cargar la lista de selecciones y mostrar la ventana
     * al presionar el boton
     *
     * @param evt
     */
    private void Btn_SeleccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SeleccionesActionPerformed

        // Ventana que contendra todos los equipos participantes en el mundial
        VentanaEquipos ventana = new VentanaEquipos();
        // Se coloca en la Raiz de la lista, el nodo que recorre toda la lista de equipos
        listaEquiposMundial.inicializarNodoActual();
        // Se recorre toda la lista de equipos participantes
        while (listaEquiposMundial.getNodoActual() != null) {
            // Se crea un nuevo PanelSeleccion
            PanelSeleccion panel = new PanelSeleccion();
            // Se le establece establecen los valores del equipo al Panel (Nombre y Bandera), 
            // Lista de Jugadores y Nombre del Entrenador
            panel.setEquipo(listaEquiposMundial.getNodoActual().getNombreEquipo(),
                    listaEquiposMundial.getNodoActual().getJugadores(),
                    listaEquiposMundial.getNodoActual().getNombreEntrenador());
            // Se agrega el Panel con el equipo a la ventana
            ventana.setSeleccion(panel);
            // Se mueve el Nodo recorredor al siguiente equipo de la lista
            listaEquiposMundial.moverNodoActual();
        }
        // Se muestra la ventana con todos los equipos del mundial
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_SeleccionesActionPerformed

    /**
     * Metodo utilizado para cargar la tabla de posiciones y mostrar la ventana
     * al presionar el boton
     *
     * @param evt
     */
    private void Btn_TablaPosicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_TablaPosicionesActionPerformed

        // Se crea la ventana que contiene la Tabla de clasificaci칩n de los gurpos
        VentanaPosiciones ventana = new VentanaPosiciones();
        // Se coloca en la Raiz de la lista de grupos, el nodo que la recorrer치.
        listaDeGrupos.inicializarNodoActal();
        // El while es para recorrer todos los grupos de la lista
        while (listaDeGrupos.getNodoActual() != null) {
            // Se obtiene la lista de NodosEquipo que pertenecen al grupo
            NodoEquipo[] selecciones = listaDeGrupos.getNodoActual().getpaisesIntegrantes();
            // Se manda a ordenar el arreglo de los equipos del grupo.
            selecciones = insertionSort(selecciones);

            // Se crea un nuevo panel con la informacion de la tabla de posiciones del grupo
            PanelPosiciones tablaDePosicion = new PanelPosiciones();
            // Envia la letra del grupo y los equipos para armar la tabla de posiciones
            tablaDePosicion.setEquipos(listaDeGrupos.getNodoActual().getLetraGrupo(), selecciones);
            // Agrega el la tabla de posiciones del grupo actual a la ventana
            ventana.agregarTablaDeGrupo(tablaDePosicion);
            // Mueve el nodo recorredor al siguiente grupo
            listaDeGrupos.moverNodoActual();
        }
        // Se muestra la ventana con la tabla de clasificacion de todos los grupos
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_TablaPosicionesActionPerformed

    /**
     * Metodo utilizado para cargar la lista de encuentros y mostrar la ventana
     * al presionar el boton
     *
     * @param evt
     */
    private void Btn_CalendarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CalendarioActionPerformed

        // Se crea la ventana que contendra los encuentros del mundial
        VentanaEncuentros ventana = new VentanaEncuentros();
        // Se coloca en la raiz de la lista de grupos, el nodo recorredor de dicha lista
        listaDeGrupos.inicializarNodoActal();
        // Se recorren los grupos uno por uno
        while (listaDeGrupos.getNodoActual() != null) {
            // Se crea un Panel que contendra la informacion de los encuentros por grupo
            PanelResultadosGrupo grupo = new PanelResultadosGrupo();
            // Se establece la letra del grupo actual al panel de encuentros.
            grupo.setLetraGrupo(listaDeGrupos.getNodoActual().getLetraGrupo());

            // Se obtiene la lista de encuentros que pertenecen al grupo actual
            ListaCalendario calendarioDelGrupo = listaDeGrupos.getNodoActual().getListaDeEnfrentamientos();
            // Se mueve a la raiz el nodo que recorre la lista de encuentros
            calendarioDelGrupo.inicializarNodoActal();
            // Se recorre la lista, partido a partido
            while (calendarioDelGrupo.getNodoActual() != null) {
                // Se crea un Panel, el cual va a contener la informacion del partido
                PanelResultadoPartido partido = new PanelResultadoPartido();

                // Se obtienen el partido analizado en esta iteracion
                NodoEncuentro encuentro = calendarioDelGrupo.getNodoActual();
                // Se obtienen los datos del partido
                String fechaEncuentro = formatoFecha.format(encuentro.getFechaYHoraDelPartido());
                String casa = encuentro.getEquipoCasa().getNombreEquipo();
                String visita = encuentro.getEquipoVisita().getNombreEquipo();
                String marcador = encuentro.getCantidadGolesCasa() + ":" + encuentro.getCantidadGolesVisita();
                String anotadoresCasa = encuentro.getAnotadoresEquipoCasa();
                String anotadoresVisita = encuentro.getAnotadoresEquipoVisita();
                String humedad = encuentro.getHumedad();
                String temperatura = encuentro.getTemperatura();
                String viento = encuentro.getVelocidadDelViento();
                String estadio = encuentro.getSedeDelEncuentro().getNombreEstadio();
                String condicionClimatica = encuentro.getCondicionClimatica();

                // Se agregan los datos del encuentro al panel con la informacion del partido
                partido.agregarEncuentro(fechaEncuentro, casa, visita, marcador, anotadoresCasa, anotadoresVisita,
                        humedad, temperatura, viento, estadio, condicionClimatica);
                // Se agrega el encuentro al panel que contiene los partidos por grupo
                grupo.agregarPanelResultado(partido);
                // Se mueve el nodo recorredor al siguiente partido del grupo
                calendarioDelGrupo.moverNodoActual();
            }
            // Se agrega a la ventana, el grupo con sus partidos correspondientes
            ventana.agregarGrupoYResultados(grupo);
            // Se mueve el nodo recorredor al grupo siguiente, para analizar sus encuentros
            listaDeGrupos.moverNodoActual();
        }
        // Se muestra la pantalla con todos los partidos del mundial organizados por grupos
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_CalendarioActionPerformed

    /**
     * Se carga la lista de los jugadores, cuando se cambia de seleccion
     *
     * @param evt
     */
    private void Cmb_ModSeleccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cmb_ModSeleccionesActionPerformed
        cargarJugadoresEnDropDownList();
    }//GEN-LAST:event_Cmb_ModSeleccionesActionPerformed

    /**
     * Metodo utilizado para modificar algun atributo del jugador seleccionado
     * al presionar click sobre el boton
     *
     * @param evt
     */
    private void Btn_ModificarJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ModificarJugadorActionPerformed
        // Obtiene el parametro que se desea modificar del jugador
        String selected = Cmb_VarJugador.getSelectedItem().toString();
        // Se obtiene el nodo del equipo seleccionado
        NodoEquipo team = listaEquiposMundial.getNodoEquipo(Cmb_ModSelecciones.getSelectedItem().toString());
        if ((!Txt_DatoModJugador.getText().equals("") && 
                !Cmb_VarJugador.getSelectedItem().toString().equals("Eliminar jugador")) ||
                Cmb_VarJugador.getSelectedItem().toString().equals("Eliminar jugador")) {
            // Variable que indica si la modificacion se cumplira exitosamente o no
            boolean exito;
            // Nombre del jugador
            String nombreJugador = Cmb_Jugadores.getSelectedItem().toString();
            switch (selected) {
                case "Modificar nombre":
                    exito = team.getJugadores().cambiarNombreJugador(nombreJugador, Txt_DatoModJugador.getText());
                    // Se refresca la lista de jugadores
                    cargarJugadoresEnDropDownList();
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "El nombre del jugador ha sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El jugador que se desea modificar no existe");
                    }
                    break;
                case "Modificar edad":
                    int edad = Integer.parseInt(Txt_DatoModJugador.getText());
                    exito = team.getJugadores().cambiarEdadJugador(nombreJugador, edad);
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "La edad del jugador ha sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El jugador que se desea modificar no existe");
                    }
                    break;
                case "Modificar estatura (cm)":
                    int estatura = Integer.parseInt(Txt_DatoModJugador.getText());
                    exito = team.getJugadores().cambiarEstaturaJugador(nombreJugador, estatura);
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "La estatura del jugador ha sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El jugador que se desea modificar no existe");
                    }
                    break;
                case "Modificar goles anotados":
                    int goles = Integer.parseInt(Txt_DatoModJugador.getText());
                    exito = team.getJugadores().cambiarGolesJugador(nombreJugador, goles);
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "Los goles anotados por el jugador han sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El jugador que se desea modificar no existe");
                    }
                    break;
                case "Modificar n칰mero de camiseta":
                    int numero = Integer.parseInt(Txt_DatoModJugador.getText());
                    exito = team.getJugadores().cambiarNumero(nombreJugador, numero);
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "El n칰mero de camiseta del jugador ha sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El n칰mero seleccionado pertenece a otro jugador de la lista");
                    }
                    break;
                case "Modificar posici칩n":
                    exito = team.getJugadores().cambiarPosicionJugador(nombreJugador, Txt_DatoModJugador.getText());
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "La posici칩n del jugador ha sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El jugador que se desea modificar no existe");
                    }
                    break;
                case "Eliminar jugador":
                    exito = team.getJugadores().eliminarJugador(nombreJugador);
                    // Se refresca la lista de jugadores
                    cargarJugadoresEnDropDownList();
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "El jugador ha sido eliminado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El jugador que se desea eliminar no existe");
                    }
                    break;
            }
            Txt_DatoModJugador.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "No se ha ingresado un nuevo dato");
        }
    }//GEN-LAST:event_Btn_ModificarJugadorActionPerformed

    /**
     * Metodo utilizado para mostrar al usuario el jugador mas joven/viejo del
     * equipo seleccionado
     *
     * @param evt
     */
    private void Btn_VerMasJovenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_VerMasJovenActionPerformed
        // Se obtiene el nodo del Equipo seleccionado
        NodoEquipo team = listaEquiposMundial.getNodoEquipo(Cmb_EquiposJugadorMasJoven.getSelectedItem().toString());
        JFrame ventana;
        NodoJugador jugador;
        // Se verifica si se consult칩 por el jugador mas viejo o mas joven
        if (Rbnt_MasJoven.isSelected()) {
            // Se crea una ventana y se obtiene el jugador mas joven de la lista
            ventana = new JFrame("Jugador m치s Joven");
            jugador = team.getJugadores().getJugadorMasJoven();
        } else {
            // Se crea una ventana y se obtiene el jugador mas viejo de la lista
            ventana = new JFrame("Jugador m치s Viejo");
            jugador = team.getJugadores().getJugadorMasViejo();
        }
        // Se crea un panel para crear el jugador mas joven o viejo del equipo            
        PanelJugador panelPlayer = new PanelJugador();
        // Se establecen los valores del jugador en el panel
        panelPlayer.setDatosJugador(team.getNombreEquipo(), jugador.getNombre(), jugador.getPosicion(),
                jugador.getNumeroCamiseta(), jugador.getEdad(), jugador.getEstatura());
        // Se agrega el panell del jugador y se muestra la ventana.

        ventana.add(panelPlayer);
        ventana.setResizable(false);
        ventana.pack();
        ventana.setLocationRelativeTo(this);
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_VerMasJovenActionPerformed

    /**
     * Metodo utilizado para filtrar que los caracteres ingresados para nombre,
     * edad, estatura y numero sean solo numeros enteros
     *
     * @param evt
     */
    private void Txt_DatoModJugadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_DatoModJugadorKeyTyped
        // Obtiene el parametro que se desea modificar al jugador del ComboBox
        String selected = Cmb_VarJugador.getSelectedItem().toString();
        // Verifica que solo ingrese numeros a los campos que asi lo requieren
        if (!selected.equals("Modificar nombre") && !selected.equals("Modificar posici칩n") && !Character.isDigit(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Solo se pueden insertar n칰meros en el par치metro " + selected);
        }
    }//GEN-LAST:event_Txt_DatoModJugadorKeyTyped

    /**
     * Limpia el cuadro de texto cuando se cambia entre elementos del combobox,
     * con los parametros del jugador
     *
     * @param evt
     */
    private void Cmb_VarJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cmb_VarJugadorActionPerformed
        Txt_DatoModJugador.setText("");
        if(Cmb_VarJugador.getSelectedItem().toString().equals("Eliminar jugador")){
            Txt_DatoModJugador.setVisible(false);
            Btn_ModificarJugador.setLocation(Btn_ModificarJugador.getX(), 140);
        }else{
            Txt_DatoModJugador.setVisible(true);
            Btn_ModificarJugador.setLocation(Btn_ModificarJugador.getX(), 170);
        }        
    }//GEN-LAST:event_Cmb_VarJugadorActionPerformed

    /**
     * Metodo utilizado para filtrar que los caracteres ingresados para la
     * capacidad de aficionados, sean solo numeros enteros
     *
     * @param evt
     */
    private void Txt_VarEstadioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_VarEstadioKeyTyped
        // Obtiene el parametro que se desea modificar al jugador del ComboBox
        String selected = Cmb_VarEstadios.getSelectedItem().toString();
        // Verifica que solo ingrese numeros a los campos que asi lo requieren
        if (selected.equals("Modificar capacidad") && !Character.isDigit(evt.getKeyChar())) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Solo se pueden insertar n칰meros en el par치metro " + selected);
        }
    }//GEN-LAST:event_Txt_VarEstadioKeyTyped

    /**
     * Limpia el cuadro de texto cuando se cambia entre elementos del combobox
     * con los parametros del estadio
     *
     * @param evt
     */
    private void Cmb_VarEstadiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cmb_VarEstadiosActionPerformed
        Txt_VarEstadio.setText("");
    }//GEN-LAST:event_Cmb_VarEstadiosActionPerformed

    /**
     * Metodo utilizado para cambiar la informacion de el estadio seleccionado,
     * al presionar click sobre el boton modificar
     *
     * @param evt
     */
    private void Btn_ModificarEstadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ModificarEstadioActionPerformed
        // Obtiene el parametro que se desea modificar del estadio
        String selected = Cmb_VarEstadios.getSelectedItem().toString();
        if (!Txt_VarEstadio.getText().equals("")) {
            // Variable que indica si la modificacion se cumplira exitosamente o no
            boolean exito;
            // Nombre del jugador
            String nombreEstadio = Cmb_Estadios.getSelectedItem().toString();
            switch (selected) {
                case "Modificar nombre":
                    exito = estadiosMundial.modificarNombreDeEstadio(nombreEstadio, Txt_VarEstadio.getText());
                    // Se refresca la lista de estadios
                    cargarEstadiosEnDropDownList();
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "El nombre del estadio ha sido modificado con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El estadio que se desea modificar no existe");
                    }
                    break;
                case "Modificar ciudad":
                    exito = estadiosMundial.modificarUbicacionDelEstadio(nombreEstadio, Txt_VarEstadio.getText());
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "La ciudad donde se ubica el estadio ha sido modificada con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El estadio que se desea modificar no existe");
                    }
                    break;
                case "Modificar capacidad":
                    int capacidad = Integer.parseInt(Txt_VarEstadio.getText());
                    exito = estadiosMundial.modificarCapacidadEstadio(nombreEstadio, capacidad);
                    // Se verifica el resultado de la operacion y se muestra un mensaje respectivo
                    if (exito) {
                        JOptionPane.showMessageDialog(this, "La capacidad del estadio ha sido modificada con 칠xito");
                    } else {
                        JOptionPane.showMessageDialog(this, "El estadio que se desea modificar no existe");
                    }
                    break;
            }
            Txt_VarEstadio.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "No se ha ingresado un nuevo dato");
        }
    }//GEN-LAST:event_Btn_ModificarEstadioActionPerformed

    private void Btn_Calendario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Calendario1ActionPerformed
        
        listaDeGrupos.inicializarNodoActal();
        VentanaGrupos ventana = new VentanaGrupos();
        
        while(listaDeGrupos.getNodoActual() != null){
            
            PanelGrupo grupo = new PanelGrupo();
            grupo.setDatosEquipos(listaDeGrupos.getNodoActual().getLetraGrupo(), listaDeGrupos.getNodoActual().getpaisesIntegrantes());
            ventana.agregarPanel(grupo);
            
            listaDeGrupos.moverNodoActual();
        }          
        
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_Calendario1ActionPerformed

    /**
     * Metodo utilizado para ordenar los equipos de mayor a menor, de acuerdo a
     * la cantidad de puntos obtenidos, y en caso de tener los mismos puntos, se
     * toma como criterio el gol diferencia
     *
     * @param pEquipos arreglo con los NodoEquipos desordenados
     * @return arreglo con los NodoEquipos ordenados
     */
    public NodoEquipo[] insertionSort(NodoEquipo[] pEquipos) {
        // ************ Ordenamiento por Medio de Insertion Sort ***************

        // Se recorre todo el arreglo
        for (int i = 0; i < pEquipos.length - 1; i++) {
            // Se establece el elemento en la posicion i como mayor.
            int mayor = i;
            // Se compara con los elemento siguiente al elemento i, uno a uno
            for (int j = i + 1; j < pEquipos.length; j++) {
                // Si el elemento de la posicion i tiene menos puntos que el elemento
                // en la posicion j, o tienen la misma cantidad de puntos, pero el
                // de la posicion j tiene mayor gol deferencia, cambia de valor la 
                // variable mayor.
                if (pEquipos[j].getPuntos() > pEquipos[mayor].getPuntos()
                        || (pEquipos[j].getPuntos() == pEquipos[mayor].getPuntos()
                        && pEquipos[j].getGolDiferencia() > pEquipos[mayor].getGolDiferencia())) {
                    // El elemento j va mas arriba en la tabla de posiciones
                    mayor = j;
                }
            }
            // Verifica si el mayor no esta en la posicion i, para hacer el cambio
            // entre el elemento en la posicion i y el ubicado en la posicion 'mayor'
            if (mayor != i) {
                // Intercambio con ayuda de un NodoEquipo auxiliar
                NodoEquipo nodoAuxiliar = pEquipos[mayor];
                pEquipos[mayor] = pEquipos[i];
                pEquipos[i] = nodoAuxiliar;
            }
        }
        return pEquipos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Calendario;
    private javax.swing.JButton Btn_Calendario1;
    private javax.swing.JButton Btn_Estadios;
    private javax.swing.JButton Btn_Goleadores;
    private javax.swing.JButton Btn_ModificarEstadio;
    private javax.swing.JButton Btn_ModificarJugador;
    private javax.swing.JButton Btn_Selecciones;
    private javax.swing.JButton Btn_TablaPosiciones;
    private javax.swing.JButton Btn_VerMasJoven;
    private javax.swing.JComboBox Cmb_EquiposJugadorMasJoven;
    private javax.swing.JComboBox Cmb_Estadios;
    private javax.swing.JComboBox Cmb_Jugadores;
    private javax.swing.JComboBox Cmb_ModSelecciones;
    private javax.swing.JComboBox Cmb_VarEstadios;
    private javax.swing.JComboBox Cmb_VarJugador;
    private javax.swing.JRadioButton Rbnt_MasJoven;
    private javax.swing.JRadioButton Rbtn_MasViejo;
    private javax.swing.JTextField Txt_DatoModJugador;
    private javax.swing.JTextField Txt_VarEstadio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
