/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import Codigo.ListaCalendario;
import Codigo.ListaEquipos;
import Codigo.ListaEstadios;
import Codigo.ListaGrupos;
import Codigo.ListaJugadores;
import Codigo.NodoEncuentro;
import Codigo.NodoEquipo;
import Codigo.NodoJugador;
import Codigo.XMLReader;
import java.text.SimpleDateFormat;

/**
 *
 * @author Mario A
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    // Lector de la información almacenada en los Archivos XML
    XMLReader lector = new XMLReader();
    // Listas de Estadios, Equipos Y Grupos del Mundial
    ListaEstadios estadiosMundial;
    ListaEquipos listaEquiposMundial;
    ListaGrupos listaDeGrupos;
    // Formato que se va a establecer en la creacion de cada fecha
    SimpleDateFormat formatoFecha = new SimpleDateFormat("EEEE dd 'de' MMMM 'de' yyyy,   h:mm a");

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        setLocationRelativeTo(null);

        // Se carga la informacion Estadios, Equipos Y Grupos, del XML, y se 
        // almacena en una Lista Simple Enlazada cada uno
        estadiosMundial = lector.cargarListaDeEstadios();
        listaEquiposMundial = lector.cargarListaEquipos();
        listaDeGrupos = lector.cargarCalendarioYGrupos(listaEquiposMundial, estadiosMundial);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        Btn_Estadios = new javax.swing.JButton();
        Btn_Selecciones = new javax.swing.JButton();
        Btn_Goleadores = new javax.swing.JButton();
        Btn_TablaPosiciones = new javax.swing.JButton();
        Btn_Calendario = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FIFA World Cup Brazil 2014");
        setResizable(false);

        jTabbedPane1.setFocusable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Btn_Estadios.setText("Estadios");
        Btn_Estadios.setFocusable(false);
        Btn_Estadios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EstadiosActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Estadios, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 150, 30));

        Btn_Selecciones.setText("Selecciones");
        Btn_Selecciones.setFocusable(false);
        Btn_Selecciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SeleccionesActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Selecciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 150, 30));

        Btn_Goleadores.setText("Goleadores");
        Btn_Goleadores.setFocusable(false);
        Btn_Goleadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_GoleadoresActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Goleadores, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 150, 30));

        Btn_TablaPosiciones.setText("Tabla de Posiciones");
        Btn_TablaPosiciones.setFocusable(false);
        Btn_TablaPosiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_TablaPosicionesActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_TablaPosiciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 150, 30));

        Btn_Calendario.setText("Calendario");
        Btn_Calendario.setFocusable(false);
        Btn_Calendario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CalendarioActionPerformed(evt);
            }
        });
        jPanel1.add(Btn_Calendario, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 150, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Mascota.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 330, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Barra Inferior.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 357, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FIFA World Cup Fondo.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTabbedPane1.addTab("Principal", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_GoleadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_GoleadoresActionPerformed
        
        // Se crea la ventana que contiene los Goleadores del torneo
        VentanaGoleadores ventana = new VentanaGoleadores();
        // Se crean dos arreglos y se inicializan vacios. Estos arreglos son los
        // que contienen a los goleadores y a la seleccion que pertenece él.
        NodoJugador[] goleadores = {null, null, null, null, null};
        String[] equipos = {"", "", "", "", ""};

        // Se mueve el nodo recorredor de la lista de equipos, a la raiz de esta.
        listaEquiposMundial.inicializarNodoActual();
        // Se recorre toda la lista de equipos
        while(listaEquiposMundial.getNodoActual() != null){            
            // Se obtiene el nombre de la seleccion actual
            String seleccionActual = listaEquiposMundial.getNodoActual().getNombreEquipo();
            // Se obtiene la lista de jugadores de el equipo actual
            ListaJugadores jugadores = listaEquiposMundial.getNodoActual().getJugadores();
            // Se mueve a la raiz, el nodo que recorrera la lista de jugadores
            jugadores.inicializarNodoActual();
            // Se recorre la lista de jugadores de la seleccion analizada actualmente
            while(jugadores.getNodoActual() != null)
            {
                // Se obtiene el jugador analizado en la iteracion
                NodoJugador jugadorAnalizado = jugadores.getNodoActual();
                // Se le asigna al jugador actual, la seleccion a la que pertenece
                String seleccionDelJugador = seleccionActual;
                // Se comparan los goles del jugador con los goleadores de la lista
                for (int i = 0; i < goleadores.length; i++) 
                {
                    // Se inserta el jugador en la posicion i, si no hay jugador
                    if(goleadores[i] == null){
                        goleadores[i] = jugadorAnalizado;
                        equipos[i] = seleccionDelJugador;
                        break;
                    }
                    // Si el jugador analizado, tiene mas goles que uno ubicado en el
                    // arreglo, se inserta este en el arreglo y el que estaba ahora va
                    // a buscar la posicion que le corresponde del arreglo
                    else if(goleadores[i].getCantidadGolesAnotados() < jugadorAnalizado.getCantidadGolesAnotados())
                    {
                        // Realiza el intercambio de jugadores en el arreglo
                        NodoJugador jugadorAux = goleadores[i];
                        goleadores[i] = jugadorAnalizado;
                        jugadorAnalizado = jugadorAux;
                        // Realiza el intercambio de equipo al que pertenece el jugador
                        String seleccionAux = equipos[i];
                        equipos[i] = seleccionDelJugador;
                        seleccionDelJugador = seleccionAux;                        
                    }                    
                }  
                // Mueve el nodo recorredor de la lista de jugadores
                jugadores.moverNodoActual();
            }  
            // Mueve el nodo recorredor de la lista de equipos participantes
            listaEquiposMundial.moverNodoActual();                                                                        
        } 
        
        // Se recorre la lista final de goleadores para agregarlos a la ventana
        for (int i = 0; i < goleadores.length; i++) {
            // Se obtienen el nombre del goleador, la seleccion y los goles anotados
            String seleccionDelGoleador = equipos[i];
            String nombreGoleador = goleadores[i].getNombre();
            int cantidadGoles = goleadores[i].getCantidadGolesAnotados();
            
            // Se crea un Panel que contentiene al goleador
            PanelGoleador goleadoresTorneo = new PanelGoleador();
            // Establece los datos de goleo del jugador, al Panel
            goleadoresTorneo.setGoleadores(seleccionDelGoleador, nombreGoleador, cantidadGoles);
            // Se agrega el panel a la Ventana
            ventana.agregarGoleador(goleadoresTorneo);
        }
        // Se muestra la ventana con los goleadores del torneo
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_GoleadoresActionPerformed

    private void Btn_EstadiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EstadiosActionPerformed

        // Se crea una VentanaEstadios, donde se mostraran todos los estadios del mundial
        VentanaEstadios ventana = new VentanaEstadios();
        // Se inicializa el NodoEstadio que va a recorrer toda la lista
        estadiosMundial.inicializarNodoActal();
        // Se recorre toda la lista de estadios para agregar cada uno a la ventana
        while (estadiosMundial.getNodoActual() != null) {
            // Se crea un nuevo Panel donde se almacena la info del estadio actual
            PanelEstadio estadio = new PanelEstadio();
            // Se establecen los datos(Nombre, Ciudad, Capacidad) del estadio al Panel.
            estadio.setDatos(estadiosMundial.getNodoActual().getNombreEstadio(),
                    estadiosMundial.getNodoActual().getCiudad(), estadiosMundial.getNodoActual().getCapacidad());
            // Se agrega el Estadio a la ventana
            ventana.agregarEstadio(estadio);
            // Se mueve al estadio siguiente de la lista, el Nodo recorredor
            estadiosMundial.moverNodoActual();
        }
        // Se muestra la ventana con todos los estadios del mundial
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_EstadiosActionPerformed

    private void Btn_SeleccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SeleccionesActionPerformed

        // Ventana que contendra todos los equipos participantes en el mundial
        VentanaEquipos ventana = new VentanaEquipos();
        // Se coloca en la Raiz de la lista, el nodo que recorre toda la lista de equipos
        listaEquiposMundial.inicializarNodoActual();
        // Se recorre toda la lista de equipos participantes
        while (listaEquiposMundial.getNodoActual() != null) {
            // Se crea un nuevo PanelSeleccion
            PanelSeleccion panel = new PanelSeleccion();
            // Se le establece establecen los valores del equipo al Panel (Nombre y Bandera)
            panel.setEquipo(listaEquiposMundial.getNodoActual().getNombreEquipo());
            // Se agrega el Panel con el equipo a la ventana
            ventana.setSeleccion(panel);
            // Se mueve el Nodo recorredor al siguiente equipo de la lista
            listaEquiposMundial.moverNodoActual();
        }
        // Se muestra la ventana con todos los equipos del mundial
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_SeleccionesActionPerformed

    private void Btn_TablaPosicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_TablaPosicionesActionPerformed

        // Se crea la ventana que contiene la Tabla de clasificación de los gurpos
        VentanaPosiciones ventana = new VentanaPosiciones();
        // Se coloca en la Raiz de la lista de grupos, el nodo que la recorrerá.
        listaDeGrupos.inicializarNodoActal();
        // El while es para recorrer todos los grupos de la lista
        while (listaDeGrupos.getNodoActual() != null) {
            // Se obtiene la lista de NodosEquipo que pertenecen al grupo
            NodoEquipo[] selecciones = listaDeGrupos.getNodoActual().getpaisesIntegrantes();
            // Se manda a ordenar el arreglo de los equipos del grupo.
            selecciones = insertionSort(selecciones);
            
            // Se crea un nuevo panel con la informacion de la tabla de posiciones del grupo
            PanelPosiciones tablaDePosicion = new PanelPosiciones();
            // Envia la letra del grupo y los equipos para armar la tabla de posiciones
            tablaDePosicion.setEquipos(listaDeGrupos.getNodoActual().getLetraGrupo(), selecciones);
            // Agrega el la tabla de posiciones del grupo actual a la ventana
            ventana.agregarTablaDeGrupo(tablaDePosicion);
            // Mueve el nodo recorredor al siguiente grupo
            listaDeGrupos.moverNodoActual();
        }
        // Se muestra la ventana con la tabla de clasificacion de todos los grupos
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_TablaPosicionesActionPerformed

    private void Btn_CalendarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CalendarioActionPerformed
        
        // Se crea la ventana que contendra los encuentros del mundial
        VentanaEncuentros ventana = new VentanaEncuentros();
        // Se coloca en la raiz de la lista de grupos, el nodo recorredor de dicha lista
        listaDeGrupos.inicializarNodoActal();
        // Se recorren los grupos uno por uno
        while (listaDeGrupos.getNodoActual() != null) {
            // Se crea un Panel que contendra la informacion de los encuentros por grupo
            PanelResultadosGrupo grupo = new PanelResultadosGrupo();
            // Se establece la letra del grupo actual al panel de encuentros.
            grupo.setLetraGrupo(listaDeGrupos.getNodoActual().getLetraGrupo());

            // Se obtiene la lista de encuentros que pertenecen al grupo actual
            ListaCalendario calendarioDelGrupo = listaDeGrupos.getNodoActual().getListaDeEnfrentamientos();
            // Se mueve a la raiz el nodo que recorre la lista de encuentros
            calendarioDelGrupo.inicializarNodoActal();
            // Se recorre la lista, partido a partido
            while (calendarioDelGrupo.getNodoActual() != null) {
                // Se crea un Panel, el cual va a contener la informacion del partido
                PanelResultadoPartido partido = new PanelResultadoPartido();
                
                // Se obtienen el partido analizado en esta iteracion
                NodoEncuentro encuentro = calendarioDelGrupo.getNodoActual();
                // Se obtienen los datos del partido
                String fechaEncuentro = formatoFecha.format(encuentro.getFechaYHoraDelPartido());
                String casa = encuentro.getEquipoCasa().getNombreEquipo();
                String visita = encuentro.getEquipoVisita().getNombreEquipo();
                String marcador = encuentro.getCantidadGolesCasa() + ":" + encuentro.getCantidadGolesVisita();
                String anotadoresCasa = encuentro.getAnotadoresEquipoCasa();
                String anotadoresVisita = encuentro.getAnotadoresEquipoVisita();
                String humedad = encuentro.getHumedad();
                String temperatura = encuentro.getTemperatura();
                String viento = encuentro.getVelocidadDelViento();
                String estadio = encuentro.getSedeDelEncuentro().getNombreEstadio();
                String condicionClimatica = encuentro.getCondicionClimatica();

                // Se agregan los datos del encuentro al panel con la informacion del partido
                partido.agregarEncuentro(fechaEncuentro, casa, visita, marcador, anotadoresCasa, anotadoresVisita,
                        humedad, temperatura, viento, estadio, condicionClimatica);
                // Se agrega el encuentro al panel que contiene los partidos por grupo
                grupo.agregarPanelResultado(partido);
                // Se mueve el nodo recorredor al siguiente partido del grupo
                calendarioDelGrupo.moverNodoActual();
            }
            // Se agrega a la ventana, el grupo con sus partidos correspondientes
            ventana.agregarGrupoYResultados(grupo);
            // Se mueve el nodo recorredor al grupo siguiente, para analizar sus encuentros
            listaDeGrupos.moverNodoActual();
        }
        // Se muestra la pantalla con todos los partidos del mundial organizados por grupos
        ventana.setVisible(true);
    }//GEN-LAST:event_Btn_CalendarioActionPerformed

    /**
     * Metodo utilizado para ordenar los equipos de mayor a menor, de acuerdo a
     * la cantidad de puntos obtenidos, y en caso de tener los mismos puntos, se
     * toma como criterio el gol diferencia
     *
     * @param pEquipos arreglo con los NodoEquipos desordenados
     * @return arreglo con los NodoEquipos ordenados
     */
    public NodoEquipo[] insertionSort(NodoEquipo[] pEquipos) {        
        // ************ Ordenamiento por Medio de Insertion Sort ***************
        
        // Se recorre todo el arreglo
        for (int i = 0; i < pEquipos.length - 1; i++) {
            // Se establece el elemento en la posicion i como mayor.
            int mayor = i;
            // Se compara con los elemento siguiente al elemento i, uno a uno
            for (int j = i + 1; j < pEquipos.length; j++) {
                // Si el elemento de la posicion i tiene menos puntos que el elemento
                // en la posicion j, o tienen la misma cantidad de puntos, pero el
                // de la posicion j tiene mayor gol deferencia, cambia de valor la 
                // variable mayor.
                if (pEquipos[j].getPuntos() > pEquipos[mayor].getPuntos() || 
                        (pEquipos[j].getPuntos() == pEquipos[mayor].getPuntos() && 
                        pEquipos[j].getGolDiferencia() > pEquipos[mayor].getGolDiferencia())) {
                    // El elemento j va mas arriba en la tabla de posiciones
                    mayor = j;
                }
            }
            // Verifica si el mayor no esta en la posicion i, para hacer el cambio
            // entre el elemento en la posicion i y el ubicado en la posicion 'mayor'
            if (mayor != i) {
                // Intercambio con ayuda de un NodoEquipo auxiliar
                NodoEquipo nodoAuxiliar = pEquipos[mayor];
                pEquipos[mayor] = pEquipos[i];
                pEquipos[i] = nodoAuxiliar;
            }
        }
        return pEquipos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Calendario;
    private javax.swing.JButton Btn_Estadios;
    private javax.swing.JButton Btn_Goleadores;
    private javax.swing.JButton Btn_Selecciones;
    private javax.swing.JButton Btn_TablaPosiciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
